num training examples:  3276
num testing examples:  820
GNN2(
  (GCNconv1): GCNConv(8, 128)
  (GCNconv2): GCNConv(128, 64)
  (GCNconv3): GCNConv(64, 32)
  (GCNconv4): GCNConv(32, 16)
  (CNNconv1): Conv1d(16, 64, kernel_size=(10,), stride=(1,))
  (CNNconv2): Conv1d(64, 32, kernel_size=(10,), stride=(1,))
  (CNNconv3): Conv1d(32, 16, kernel_size=(10,), stride=(1,))
  (avg_pool): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
  (fc1): Linear(in_features=384, out_features=8192, bias=True)
  (fc2): Linear(in_features=8192, out_features=1, bias=True)
  (dropout): Dropout(p=0.1, inplace=False)
)
Parameters:  3210081
Epoch 1/10, Loss: 55.4279
Epoch 2/10, Loss: 1.2358
Epoch 3/10, Loss: 0.6244
Epoch 4/10, Loss: 0.5723
Epoch 5/10, Loss: 0.5693
Epoch 6/10, Loss: 0.5789
Epoch 7/10, Loss: 0.5719
Epoch 8/10, Loss: 0.5797
Epoch 9/10, Loss: 0.5691
Epoch 10/10, Loss: 0.5574
Traceback (most recent call last):
  File "C:\Users\ediso\MISL\structure_to_signal\model.py", line 279, in <module>
    plot_loss_over_epochs(train_losses, epochs)
  File "C:\Users\ediso\MISL\structure_to_signal\model.py", line 46, in plot_loss_over_epochs
    wandb.log({"Loss Over Epochs": plt})
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 390, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 341, in wrapper_fn
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 331, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 1752, in log
    self._log(data=data, step=step, commit=commit)
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 1527, in _log
    self._partial_history_callback(data, step, commit)
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 1397, in _partial_history_callback
    self._backend.interface.publish_partial_history(
  File "C:\Python311\Lib\site-packages\wandb\sdk\interface\interface.py", line 635, in publish_partial_history
    data = history_dict_to_json(run, data, step=user_step, ignore_copy_err=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\data_types\utils.py", line 52, in history_dict_to_json
    payload[key] = val_to_json(
                   ^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\data_types\utils.py", line 86, in val_to_json
    val = Plotly.make_plot_media(val)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\data_types\plotly.py", line 49, in make_plot_media
    val = util.matplotlib_to_plotly(val)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\util.py", line 508, in matplotlib_to_plotly
    return tools.mpl_to_plotly(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\plotly\tools.py", line 111, in mpl_to_plotly
    matplotlylib.Exporter(renderer).run(fig)
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mplexporter\exporter.py", line 53, in run
    self.crawl_fig(fig)
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mplexporter\exporter.py", line 122, in crawl_fig
    with self.renderer.draw_figure(fig=fig, props=utils.get_figure_properties(fig)):
  File "C:\Python311\Lib\contextlib.py", line 137, in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mplexporter\renderers\base.py", line 45, in draw_figure
    self.open_figure(fig=fig, props=props)
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\renderer.py", line 89, in open_figure
    self.mpl_x_bounds, self.mpl_y_bounds = mpltools.get_axes_bounds(fig)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mpltools.py", line 265, in get_axes_bounds
    x_min, y_min, x_max, y_max = min(x_min), min(y_min), max(x_max), max(y_max)
                                 ^^^^^^^^^^
ValueError: min() arg is an empty sequence