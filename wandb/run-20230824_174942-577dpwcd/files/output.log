num training examples:  3276
num testing examples:  820
GNN2(
  (GCNconv1): GCNConv(8, 128)
  (GCNconv2): GCNConv(128, 64)
  (GCNconv3): GCNConv(64, 32)
  (GCNconv4): GCNConv(32, 16)
  (CNNconv1): Conv1d(16, 64, kernel_size=(10,), stride=(1,))
  (CNNconv2): Conv1d(64, 32, kernel_size=(10,), stride=(1,))
  (CNNconv3): Conv1d(32, 16, kernel_size=(10,), stride=(1,))
  (avg_pool): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
  (fc1): Linear(in_features=384, out_features=8192, bias=True)
  (fc2): Linear(in_features=8192, out_features=1, bias=True)
  (dropout): Dropout(p=0.1, inplace=False)
)
Parameters:  3210081
Epoch 1/100, Loss: 56.4132
Epoch 2/100, Loss: 1.4350
Epoch 3/100, Loss: 0.6445
Epoch 4/100, Loss: 0.5758
Epoch 5/100, Loss: 0.5725
Epoch 6/100, Loss: 0.5719
Epoch 7/100, Loss: 0.5687
Epoch 8/100, Loss: 0.5739
Epoch 9/100, Loss: 0.5708
Epoch 10/100, Loss: 0.5720
Epoch 11/100, Loss: 0.5662
Epoch 12/100, Loss: 0.5673
Epoch 13/100, Loss: 0.5582
Epoch 14/100, Loss: 0.5349
Epoch 15/100, Loss: 0.5232
Epoch 16/100, Loss: 0.5172
Epoch 17/100, Loss: 0.5098
Epoch 18/100, Loss: 0.5174
Epoch 19/100, Loss: 0.5116
Epoch 20/100, Loss: 0.5073
Epoch 21/100, Loss: 0.5106
Epoch 22/100, Loss: 0.5191
Epoch 23/100, Loss: 0.5157
Epoch 24/100, Loss: 0.5169
Epoch 25/100, Loss: 0.5056
Epoch 26/100, Loss: 0.5107
Epoch 27/100, Loss: 0.5108
Epoch 28/100, Loss: 0.5142
Epoch 29/100, Loss: 0.5038
Epoch 30/100, Loss: 0.4998
Epoch 31/100, Loss: 0.4963
Epoch 32/100, Loss: 0.4744
Epoch 33/100, Loss: 0.4393
Epoch 34/100, Loss: 0.3894
Epoch 35/100, Loss: 0.2927
Epoch 36/100, Loss: 0.2339
Epoch 37/100, Loss: 0.2114
Epoch 38/100, Loss: 0.1795
Epoch 39/100, Loss: 0.1638
Epoch 40/100, Loss: 0.1451
Epoch 41/100, Loss: 0.1389
Epoch 42/100, Loss: 0.1174
Epoch 43/100, Loss: 0.1113
Epoch 44/100, Loss: 0.0981
Epoch 45/100, Loss: 0.0948
Epoch 46/100, Loss: 0.0850
Epoch 47/100, Loss: 0.0806
Epoch 48/100, Loss: 0.0754
Epoch 49/100, Loss: 0.0714
Epoch 50/100, Loss: 0.0707
Epoch 51/100, Loss: 0.0666
Epoch 52/100, Loss: 0.0677
Epoch 53/100, Loss: 0.0617
Epoch 54/100, Loss: 0.0597
Epoch 55/100, Loss: 0.0600
Epoch 56/100, Loss: 0.0575
Epoch 57/100, Loss: 0.0542
Epoch 58/100, Loss: 0.0535
Epoch 59/100, Loss: 0.0525
Epoch 60/100, Loss: 0.0474
Epoch 61/100, Loss: 0.0471
Epoch 62/100, Loss: 0.0489
Epoch 63/100, Loss: 0.0469
Epoch 64/100, Loss: 0.0475
Epoch 65/100, Loss: 0.0477
Epoch 66/100, Loss: 0.0459
Epoch 67/100, Loss: 0.0441
Epoch 68/100, Loss: 0.0427
Epoch 69/100, Loss: 0.0427
Epoch 70/100, Loss: 0.0404
Epoch 71/100, Loss: 0.0451
Epoch 72/100, Loss: 0.0406
Epoch 73/100, Loss: 0.0420
Epoch 74/100, Loss: 0.0401
Epoch 75/100, Loss: 0.0387
Epoch 76/100, Loss: 0.0406
Epoch 77/100, Loss: 0.0377
Epoch 78/100, Loss: 0.0365
Epoch 79/100, Loss: 0.0387
Epoch 80/100, Loss: 0.0348
Epoch 81/100, Loss: 0.0362
Epoch 82/100, Loss: 0.0343
Epoch 83/100, Loss: 0.0315
Epoch 84/100, Loss: 0.0362
Epoch 85/100, Loss: 0.0343
Epoch 86/100, Loss: 0.0339
Epoch 87/100, Loss: 0.0330
Epoch 88/100, Loss: 0.0293
Epoch 89/100, Loss: 0.0305
Epoch 90/100, Loss: 0.0291
Epoch 91/100, Loss: 0.0282
Epoch 92/100, Loss: 0.0288
Epoch 93/100, Loss: 0.0286
Epoch 94/100, Loss: 0.0285
Epoch 95/100, Loss: 0.0274
Epoch 96/100, Loss: 0.0277
Epoch 97/100, Loss: 0.0281
Epoch 98/100, Loss: 0.0281
Epoch 99/100, Loss: 0.0278
Epoch 100/100, Loss: 0.0270
Average Test Loss: 0.0012
RMSE: 2.9950
Traceback (most recent call last):
  File "C:\Users\ediso\MISL\structure_to_signal\model.py", line 285, in <module>
    plot_true_vs_predicted(true_values, predicted_values)
  File "C:\Users\ediso\MISL\structure_to_signal\model.py", line 34, in plot_true_vs_predicted
    wandb.log({"True vs. Predicted Values": plt})
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 390, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 341, in wrapper_fn
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 331, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 1752, in log
    self._log(data=data, step=step, commit=commit)
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 1527, in _log
    self._partial_history_callback(data, step, commit)
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 1397, in _partial_history_callback
    self._backend.interface.publish_partial_history(
  File "C:\Python311\Lib\site-packages\wandb\sdk\interface\interface.py", line 635, in publish_partial_history
    data = history_dict_to_json(run, data, step=user_step, ignore_copy_err=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\data_types\utils.py", line 52, in history_dict_to_json
    payload[key] = val_to_json(
                   ^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\data_types\utils.py", line 86, in val_to_json
    val = Plotly.make_plot_media(val)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\data_types\plotly.py", line 49, in make_plot_media
    val = util.matplotlib_to_plotly(val)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\util.py", line 508, in matplotlib_to_plotly
    return tools.mpl_to_plotly(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\plotly\tools.py", line 111, in mpl_to_plotly
    matplotlylib.Exporter(renderer).run(fig)
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mplexporter\exporter.py", line 53, in run
    self.crawl_fig(fig)
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mplexporter\exporter.py", line 124, in crawl_fig
    self.crawl_ax(ax)
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mplexporter\exporter.py", line 146, in crawl_ax
    self.draw_collection(ax, collection)
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mplexporter\exporter.py", line 289, in draw_collection
    offset_order = offset_dict[collection.get_offset_position()]
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'PathCollection' object has no attribute 'get_offset_position'