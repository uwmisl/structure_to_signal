num training examples:  3276
num testing examples:  820
GNN2(
  (GCNconv1): GCNConv(8, 128)
  (GCNconv2): GCNConv(128, 64)
  (GCNconv3): GCNConv(64, 32)
  (GCNconv4): GCNConv(32, 16)
  (CNNconv1): Conv1d(16, 64, kernel_size=(10,), stride=(1,))
  (CNNconv2): Conv1d(64, 32, kernel_size=(10,), stride=(1,))
  (CNNconv3): Conv1d(32, 16, kernel_size=(10,), stride=(1,))
  (avg_pool): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
  (fc1): Linear(in_features=384, out_features=8192, bias=True)
  (fc2): Linear(in_features=8192, out_features=1, bias=True)
  (dropout): Dropout(p=0.1, inplace=False)
)
Parameters:  3210081
Epoch 1/100, Loss: 61.0288
Epoch 2/100, Loss: 1.4744
Epoch 3/100, Loss: 0.6365
Epoch 4/100, Loss: 0.5684
Epoch 5/100, Loss: 0.5654
Epoch 6/100, Loss: 0.5688
Epoch 7/100, Loss: 0.5731
Epoch 8/100, Loss: 0.5693
Epoch 9/100, Loss: 0.5665
Epoch 10/100, Loss: 0.5673
Epoch 11/100, Loss: 0.5584
Epoch 12/100, Loss: 0.5578
Epoch 13/100, Loss: 0.5580
Epoch 14/100, Loss: 0.5579
Epoch 15/100, Loss: 0.5520
Epoch 16/100, Loss: 0.5476
Epoch 17/100, Loss: 0.5461
Epoch 18/100, Loss: 0.5393
Epoch 19/100, Loss: 0.5250
Epoch 20/100, Loss: 0.5070
Epoch 21/100, Loss: 0.5022
Epoch 22/100, Loss: 0.4968
Epoch 23/100, Loss: 0.4943
Epoch 24/100, Loss: 0.4950
Epoch 25/100, Loss: 0.4914
Epoch 26/100, Loss: 0.4956
Epoch 27/100, Loss: 0.4931
Epoch 28/100, Loss: 0.4968
Epoch 29/100, Loss: 0.4878
Epoch 30/100, Loss: 0.4751
Epoch 31/100, Loss: 0.4713
Epoch 32/100, Loss: 0.4444
Epoch 33/100, Loss: 0.3862
Epoch 34/100, Loss: 0.3384
Epoch 35/100, Loss: 0.2862
Epoch 36/100, Loss: 0.2511
Epoch 37/100, Loss: 0.2101
Epoch 38/100, Loss: 0.1903
Epoch 39/100, Loss: 0.1625
Epoch 40/100, Loss: 0.1598
Epoch 41/100, Loss: 0.1465
Epoch 42/100, Loss: 0.1335
Epoch 43/100, Loss: 0.1286
Epoch 44/100, Loss: 0.1161
Epoch 45/100, Loss: 0.1104
Epoch 46/100, Loss: 0.1019
Epoch 47/100, Loss: 0.0962
Epoch 48/100, Loss: 0.0929
Epoch 49/100, Loss: 0.0839
Epoch 50/100, Loss: 0.0830
Epoch 51/100, Loss: 0.0750
Epoch 52/100, Loss: 0.0740
Epoch 53/100, Loss: 0.0742
Epoch 54/100, Loss: 0.0740
Epoch 55/100, Loss: 0.0703
Epoch 56/100, Loss: 0.0639
Epoch 57/100, Loss: 0.0634
Epoch 58/100, Loss: 0.0641
Epoch 59/100, Loss: 0.0633
Epoch 60/100, Loss: 0.0571
Epoch 61/100, Loss: 0.0589
Epoch 62/100, Loss: 0.0566
Epoch 63/100, Loss: 0.0538
Epoch 64/100, Loss: 0.0549
Epoch 65/100, Loss: 0.0542
Epoch 66/100, Loss: 0.0502
Epoch 67/100, Loss: 0.0491
Epoch 68/100, Loss: 0.0471
Epoch 69/100, Loss: 0.0482
Epoch 70/100, Loss: 0.0464
Epoch 71/100, Loss: 0.0486
Epoch 72/100, Loss: 0.0482
Epoch 73/100, Loss: 0.0415
Epoch 74/100, Loss: 0.0466
Epoch 75/100, Loss: 0.0454
Epoch 76/100, Loss: 0.0433
Epoch 77/100, Loss: 0.0404
Epoch 78/100, Loss: 0.0397
Epoch 79/100, Loss: 0.0392
Epoch 80/100, Loss: 0.0383
Epoch 81/100, Loss: 0.0382
Epoch 82/100, Loss: 0.0361
Epoch 83/100, Loss: 0.0354
Epoch 84/100, Loss: 0.0371
Epoch 85/100, Loss: 0.0333
Epoch 86/100, Loss: 0.0341
Epoch 87/100, Loss: 0.0344
Epoch 88/100, Loss: 0.0313
Epoch 89/100, Loss: 0.0311
Epoch 90/100, Loss: 0.0320
Epoch 91/100, Loss: 0.0314
Epoch 92/100, Loss: 0.0297
Epoch 93/100, Loss: 0.0293
Epoch 94/100, Loss: 0.0301
Epoch 95/100, Loss: 0.0288
Epoch 96/100, Loss: 0.0265
Epoch 97/100, Loss: 0.0269
Epoch 98/100, Loss: 0.0253
Epoch 99/100, Loss: 0.0259
Epoch 100/100, Loss: 0.0249
Traceback (most recent call last):
  File "C:\Users\ediso\MISL\structure_to_signal\model.py", line 279, in <module>
    plot_loss_over_epochs(train_losses, epochs)
  File "C:\Users\ediso\MISL\structure_to_signal\model.py", line 46, in plot_loss_over_epochs
    wandb.log({"Loss Over Epochs": wandb.Plotly(plt)})
                                   ^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\data_types\plotly.py", line 63, in __init__
    val = util.matplotlib_to_plotly(val)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\util.py", line 508, in matplotlib_to_plotly
    return tools.mpl_to_plotly(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\plotly\tools.py", line 111, in mpl_to_plotly
    matplotlylib.Exporter(renderer).run(fig)
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mplexporter\exporter.py", line 53, in run
    self.crawl_fig(fig)
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mplexporter\exporter.py", line 122, in crawl_fig
    with self.renderer.draw_figure(fig=fig, props=utils.get_figure_properties(fig)):
  File "C:\Python311\Lib\contextlib.py", line 137, in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mplexporter\renderers\base.py", line 45, in draw_figure
    self.open_figure(fig=fig, props=props)
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\renderer.py", line 89, in open_figure
    self.mpl_x_bounds, self.mpl_y_bounds = mpltools.get_axes_bounds(fig)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mpltools.py", line 265, in get_axes_bounds
    x_min, y_min, x_max, y_max = min(x_min), min(y_min), max(x_max), max(y_max)
                                 ^^^^^^^^^^
ValueError: min() arg is an empty sequence