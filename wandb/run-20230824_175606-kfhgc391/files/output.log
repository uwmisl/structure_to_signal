num training examples:  3276
num testing examples:  820
GNN2(
  (GCNconv1): GCNConv(8, 128)
  (GCNconv2): GCNConv(128, 64)
  (GCNconv3): GCNConv(64, 32)
  (GCNconv4): GCNConv(32, 16)
  (CNNconv1): Conv1d(16, 64, kernel_size=(10,), stride=(1,))
  (CNNconv2): Conv1d(64, 32, kernel_size=(10,), stride=(1,))
  (CNNconv3): Conv1d(32, 16, kernel_size=(10,), stride=(1,))
  (avg_pool): AvgPool1d(kernel_size=(2,), stride=(2,), padding=(0,))
  (fc1): Linear(in_features=384, out_features=8192, bias=True)
  (fc2): Linear(in_features=8192, out_features=1, bias=True)
  (dropout): Dropout(p=0.1, inplace=False)
)
Parameters:  3210081
Epoch 1/100, Loss: 70.7235
Epoch 2/100, Loss: 1.4978
Epoch 3/100, Loss: 0.6368
Epoch 4/100, Loss: 0.5717
Epoch 5/100, Loss: 0.5671
Epoch 6/100, Loss: 0.5655
Epoch 7/100, Loss: 0.5613
Epoch 8/100, Loss: 0.5623
Epoch 9/100, Loss: 0.5630
Epoch 10/100, Loss: 0.5596
Epoch 11/100, Loss: 0.5646
Epoch 12/100, Loss: 0.5660
Epoch 13/100, Loss: 0.5694
Epoch 14/100, Loss: 0.5548
Epoch 15/100, Loss: 0.5611
Epoch 16/100, Loss: 0.5573
Epoch 17/100, Loss: 0.5602
Epoch 18/100, Loss: 0.5634
Epoch 19/100, Loss: 0.5549
Epoch 20/100, Loss: 0.5515
Epoch 21/100, Loss: 0.5517
Epoch 22/100, Loss: 0.5529
Epoch 23/100, Loss: 0.5526
Epoch 24/100, Loss: 0.5582
Epoch 25/100, Loss: 0.5485
Epoch 26/100, Loss: 0.5455
Epoch 27/100, Loss: 0.5559
Epoch 28/100, Loss: 0.5498
Epoch 29/100, Loss: 0.5469
Epoch 30/100, Loss: 0.5423
Epoch 31/100, Loss: 0.5291
Epoch 32/100, Loss: 0.5235
Epoch 33/100, Loss: 0.5209
Epoch 34/100, Loss: 0.4982
Epoch 35/100, Loss: 0.4910
Epoch 36/100, Loss: 0.4580
Epoch 37/100, Loss: 0.4082
Epoch 38/100, Loss: 0.2641
Epoch 39/100, Loss: 0.2045
Epoch 40/100, Loss: 0.1772
Epoch 41/100, Loss: 0.1818
Epoch 42/100, Loss: 0.1609
Epoch 43/100, Loss: 0.1519
Epoch 44/100, Loss: 0.1411
Epoch 45/100, Loss: 0.1377
Epoch 46/100, Loss: 0.1280
Epoch 47/100, Loss: 0.1311
Epoch 48/100, Loss: 0.1225
Epoch 49/100, Loss: 0.1136
Epoch 50/100, Loss: 0.1066
Epoch 51/100, Loss: 0.1037
Epoch 52/100, Loss: 0.1029
Epoch 53/100, Loss: 0.0938
Epoch 54/100, Loss: 0.0810
Epoch 55/100, Loss: 0.0780
Epoch 56/100, Loss: 0.0802
Epoch 57/100, Loss: 0.0726
Epoch 58/100, Loss: 0.0652
Epoch 59/100, Loss: 0.0654
Epoch 60/100, Loss: 0.0591
Epoch 61/100, Loss: 0.0564
Epoch 62/100, Loss: 0.0579
Epoch 63/100, Loss: 0.0569
Epoch 64/100, Loss: 0.0504
Epoch 65/100, Loss: 0.0490
Epoch 66/100, Loss: 0.0485
Epoch 67/100, Loss: 0.0462
Epoch 68/100, Loss: 0.0469
Epoch 69/100, Loss: 0.0443
Epoch 70/100, Loss: 0.0426
Epoch 71/100, Loss: 0.0399
Epoch 72/100, Loss: 0.0416
Epoch 73/100, Loss: 0.0384
Epoch 74/100, Loss: 0.0382
Epoch 75/100, Loss: 0.0360
Epoch 76/100, Loss: 0.0356
Epoch 77/100, Loss: 0.0380
Epoch 78/100, Loss: 0.0343
Epoch 79/100, Loss: 0.0323
Epoch 80/100, Loss: 0.0317
Epoch 81/100, Loss: 0.0305
Epoch 82/100, Loss: 0.0331
Epoch 83/100, Loss: 0.0307
Epoch 84/100, Loss: 0.0278
Epoch 85/100, Loss: 0.0289
Epoch 86/100, Loss: 0.0258
Epoch 87/100, Loss: 0.0253
Epoch 88/100, Loss: 0.0271
Epoch 89/100, Loss: 0.0244
Epoch 90/100, Loss: 0.0234
Epoch 91/100, Loss: 0.0224
Epoch 92/100, Loss: 0.0221
Epoch 93/100, Loss: 0.0211
Epoch 94/100, Loss: 0.0204
Epoch 95/100, Loss: 0.0202
Epoch 96/100, Loss: 0.0198
Epoch 97/100, Loss: 0.0202
Epoch 98/100, Loss: 0.0196
Epoch 99/100, Loss: 0.0188
Epoch 100/100, Loss: 0.0183
Traceback (most recent call last):
  File "C:\Users\ediso\MISL\structure_to_signal\model.py", line 279, in <module>
    plot_loss_over_epochs(train_losses, epochs)
  File "C:\Users\ediso\MISL\structure_to_signal\model.py", line 46, in plot_loss_over_epochs
    wandb.log({"Loss Over Epochs": plt})
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 390, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 341, in wrapper_fn
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 331, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 1752, in log
    self._log(data=data, step=step, commit=commit)
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 1527, in _log
    self._partial_history_callback(data, step, commit)
  File "C:\Python311\Lib\site-packages\wandb\sdk\wandb_run.py", line 1397, in _partial_history_callback
    self._backend.interface.publish_partial_history(
  File "C:\Python311\Lib\site-packages\wandb\sdk\interface\interface.py", line 635, in publish_partial_history
    data = history_dict_to_json(run, data, step=user_step, ignore_copy_err=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\data_types\utils.py", line 52, in history_dict_to_json
    payload[key] = val_to_json(
                   ^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\data_types\utils.py", line 86, in val_to_json
    val = Plotly.make_plot_media(val)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\sdk\data_types\plotly.py", line 49, in make_plot_media
    val = util.matplotlib_to_plotly(val)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\wandb\util.py", line 508, in matplotlib_to_plotly
    return tools.mpl_to_plotly(obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\plotly\tools.py", line 111, in mpl_to_plotly
    matplotlylib.Exporter(renderer).run(fig)
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mplexporter\exporter.py", line 53, in run
    self.crawl_fig(fig)
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mplexporter\exporter.py", line 122, in crawl_fig
    with self.renderer.draw_figure(fig=fig, props=utils.get_figure_properties(fig)):
  File "C:\Python311\Lib\contextlib.py", line 137, in __enter__
    return next(self.gen)
           ^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mplexporter\renderers\base.py", line 45, in draw_figure
    self.open_figure(fig=fig, props=props)
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\renderer.py", line 89, in open_figure
    self.mpl_x_bounds, self.mpl_y_bounds = mpltools.get_axes_bounds(fig)
                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\site-packages\plotly\matplotlylib\mpltools.py", line 265, in get_axes_bounds
    x_min, y_min, x_max, y_max = min(x_min), min(y_min), max(x_max), max(y_max)
                                 ^^^^^^^^^^
ValueError: min() arg is an empty sequence